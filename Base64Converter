<#
.SYNOPSIS
    PowerShell GUI application for bidirectional image/Base64 conversion.

.DESCRIPTION
    A Windows Forms-based GUI tool that converts images to Base64 format and vice versa.
    Supports major image formats (JPG, PNG, GIF, BMP, TIFF) with file browser, image preview,
    clipboard integration, and toggleable data URL prefix output. Ideal for web development
    and data encoding workflows.

.FEATURES
    - Convert images to Base64 with optional data URL prefix
    - Convert Base64 back to image files
    - Image preview and file browsing
    - Clipboard copy/paste functionality
    - Support for multiple image formats
    - 10MB file size limit for performance

.AUTHOR
    pjhiggins (GitHub: pjhiggins1965)

.VERSION
    1.0

.DATE
    August 2025

.NOTES
    Requires PowerShell with Windows Forms support
    Run with: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
#>

Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Create the main form
$form = New-Object System.Windows.Forms.Form
$form.Text = "Base64 Image Converter"
$form.Size = New-Object System.Drawing.Size(800, 560)
$form.StartPosition = "CenterScreen"
$form.FormBorderStyle = "FixedSingle"
$form.MaximizeBox = $false

# Create a group box for file operations
$fileGroupBox = New-Object System.Windows.Forms.GroupBox
$fileGroupBox.Text = "Image File"
$fileGroupBox.Location = New-Object System.Drawing.Point(10, 10)
$fileGroupBox.Size = New-Object System.Drawing.Size(760, 105)

# File path textbox
$filePathTextBox = New-Object System.Windows.Forms.TextBox
$filePathTextBox.Location = New-Object System.Drawing.Point(10, 25)
$filePathTextBox.Size = New-Object System.Drawing.Size(580, 23)
$filePathTextBox.ReadOnly = $true

# Browse button
$browseButton = New-Object System.Windows.Forms.Button
$browseButton.Text = "Browse"
$browseButton.Location = New-Object System.Drawing.Point(600, 25)
$browseButton.Size = New-Object System.Drawing.Size(75, 23)

# Convert to Base64 button
$convertToBase64Button = New-Object System.Windows.Forms.Button
$convertToBase64Button.Text = "Convert to Base64"
$convertToBase64Button.Location = New-Object System.Drawing.Point(685, 25)
$convertToBase64Button.Size = New-Object System.Drawing.Size(65, 45)
$convertToBase64Button.Enabled = $false

# Checkbox for data URL prefix option
$includeDataUrlCheckBox = New-Object System.Windows.Forms.CheckBox
$includeDataUrlCheckBox.Text = "Include data URL prefix (data:image/...;base64,)"
$includeDataUrlCheckBox.Location = New-Object System.Drawing.Point(10, 55)
$includeDataUrlCheckBox.Size = New-Object System.Drawing.Size(350, 20)
$includeDataUrlCheckBox.Checked = $true

# Image preview
$pictureBox = New-Object System.Windows.Forms.PictureBox
$pictureBox.Location = New-Object System.Drawing.Point(600, 125)
$pictureBox.Size = New-Object System.Drawing.Size(150, 150)
$pictureBox.SizeMode = "Zoom"
$pictureBox.BorderStyle = "FixedSingle"

# Create a group box for Base64 operations
$base64GroupBox = New-Object System.Windows.Forms.GroupBox
$base64GroupBox.Text = "Base64 Data"
$base64GroupBox.Location = New-Object System.Drawing.Point(10, 125)
$base64GroupBox.Size = New-Object System.Drawing.Size(580, 300)

# Base64 textbox
$base64TextBox = New-Object System.Windows.Forms.TextBox
$base64TextBox.Location = New-Object System.Drawing.Point(10, 25)
$base64TextBox.Size = New-Object System.Drawing.Size(560, 220)
$base64TextBox.Multiline = $true
$base64TextBox.ScrollBars = "Vertical"
$base64TextBox.WordWrap = $false

# Control buttons for Base64 operations
$copyButton = New-Object System.Windows.Forms.Button
$copyButton.Text = "Copy to Clipboard"
$copyButton.Location = New-Object System.Drawing.Point(10, 255)
$copyButton.Size = New-Object System.Drawing.Size(120, 30)

$pasteButton = New-Object System.Windows.Forms.Button
$pasteButton.Text = "Paste from Clipboard"
$pasteButton.Location = New-Object System.Drawing.Point(140, 255)
$pasteButton.Size = New-Object System.Drawing.Size(120, 30)

$clearButton = New-Object System.Windows.Forms.Button
$clearButton.Text = "Clear"
$clearButton.Location = New-Object System.Drawing.Point(270, 255)
$clearButton.Size = New-Object System.Drawing.Size(80, 30)

$convertFromBase64Button = New-Object System.Windows.Forms.Button
$convertFromBase64Button.Text = "Save as Image"
$convertFromBase64Button.Location = New-Object System.Drawing.Point(450, 255)
$convertFromBase64Button.Size = New-Object System.Drawing.Size(120, 30)

# Status label
$statusLabel = New-Object System.Windows.Forms.Label
$statusLabel.Text = "Ready"
$statusLabel.Location = New-Object System.Drawing.Point(10, 445)
$statusLabel.Size = New-Object System.Drawing.Size(760, 20)
$statusLabel.ForeColor = "Blue"

# Information label
$infoLabel = New-Object System.Windows.Forms.Label
$infoLabel.Text = "Supported formats: JPG, PNG, GIF, BMP, TIFF | Max file size: 10MB | Toggle data URL prefix as needed"
$infoLabel.Location = New-Object System.Drawing.Point(10, 475)
$infoLabel.Size = New-Object System.Drawing.Size(760, 20)
$infoLabel.ForeColor = "Gray"

# Global variable to store current image path
$script:currentImagePath = $null

# Browse button click event
$browseButton.Add_Click({
    $openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
    $openFileDialog.Filter = "Image Files|*.jpg;*.jpeg;*.png;*.gif;*.bmp;*.tiff|All Files|*.*"
    $openFileDialog.Title = "Select an Image File"
    
    if ($openFileDialog.ShowDialog() -eq "OK") {
        $script:currentImagePath = $openFileDialog.FileName
        $filePathTextBox.Text = $script:currentImagePath
        $convertToBase64Button.Enabled = $true
        
        # Load image preview
        try {
            $image = [System.Drawing.Image]::FromFile($script:currentImagePath)
            $pictureBox.Image = $image
            $statusLabel.Text = "Image loaded: $($image.Width)x$($image.Height) pixels"
            $statusLabel.ForeColor = "Green"
        }
        catch {
            $statusLabel.Text = "Error loading image preview: $($_.Exception.Message)"
            $statusLabel.ForeColor = "Red"
        }
    }
})

# Convert to Base64 button click event
$convertToBase64Button.Add_Click({
    if ($script:currentImagePath -and (Test-Path $script:currentImagePath)) {
        try {
            # Check file size (limit to 10MB)
            $fileInfo = Get-Item $script:currentImagePath
            if ($fileInfo.Length -gt 10MB) {
                [System.Windows.Forms.MessageBox]::Show("File size exceeds 10MB limit.", "Error", "OK", "Error")
                return
            }
            
            $statusLabel.Text = "Converting to Base64..."
            $statusLabel.ForeColor = "Blue"
            $form.Refresh()
            
            # Read file and convert to Base64
            $bytes = [System.IO.File]::ReadAllBytes($script:currentImagePath)
            $base64String = [System.Convert]::ToBase64String($bytes)
            
            # Get file extension for data URL
            $extension = [System.IO.Path]::GetExtension($script:currentImagePath).ToLower()
            $mimeType = switch ($extension) {
                ".jpg"  { "image/jpeg" }
                ".jpeg" { "image/jpeg" }
                ".png"  { "image/png" }
                ".gif"  { "image/gif" }
                ".bmp"  { "image/bmp" }
                ".tiff" { "image/tiff" }
                default { "image/jpeg" }
            }
            
            # Create output based on checkbox selection
            if ($includeDataUrlCheckBox.Checked) {
                # Create data URL format
                $output = "data:$mimeType;base64,$base64String"
                $base64TextBox.Text = $output
                $statusLabel.Text = "Conversion completed with data URL prefix. Total length: $($output.Length) characters"
            }
            else {
                # Raw Base64 only
                $base64TextBox.Text = $base64String
                $statusLabel.Text = "Conversion completed (raw Base64). Length: $($base64String.Length) characters"
            }
            $statusLabel.ForeColor = "Green"
        }
        catch {
            $statusLabel.Text = "Error converting to Base64: $($_.Exception.Message)"
            $statusLabel.ForeColor = "Red"
        }
    }
})

# Copy to clipboard button click event
$copyButton.Add_Click({
    if ($base64TextBox.Text.Trim() -ne "") {
        try {
            [System.Windows.Forms.Clipboard]::SetText($base64TextBox.Text)
            $statusLabel.Text = "Base64 data copied to clipboard"
            $statusLabel.ForeColor = "Green"
        }
        catch {
            $statusLabel.Text = "Error copying to clipboard: $($_.Exception.Message)"
            $statusLabel.ForeColor = "Red"
        }
    }
})

# Paste from clipboard button click event
$pasteButton.Add_Click({
    try {
        if ([System.Windows.Forms.Clipboard]::ContainsText()) {
            $base64TextBox.Text = [System.Windows.Forms.Clipboard]::GetText()
            $statusLabel.Text = "Base64 data pasted from clipboard"
            $statusLabel.ForeColor = "Green"
        }
        else {
            $statusLabel.Text = "No text found in clipboard"
            $statusLabel.ForeColor = "Orange"
        }
    }
    catch {
        $statusLabel.Text = "Error pasting from clipboard: $($_.Exception.Message)"
        $statusLabel.ForeColor = "Red"
    }
})

# Clear button click event
$clearButton.Add_Click({
    $base64TextBox.Text = ""
    $filePathTextBox.Text = ""
    $pictureBox.Image = $null
    $convertToBase64Button.Enabled = $false
    $script:currentImagePath = $null
    $statusLabel.Text = "Data cleared"
    $statusLabel.ForeColor = "Blue"
})

# Convert from Base64 button click event
$convertFromBase64Button.Add_Click({
    if ($base64TextBox.Text.Trim() -ne "") {
        try {
            $saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
            $saveFileDialog.Filter = "PNG Image|*.png|JPEG Image|*.jpg|GIF Image|*.gif|BMP Image|*.bmp|All Files|*.*"
            $saveFileDialog.Title = "Save Image As"
            $saveFileDialog.DefaultExt = "png"
            
            if ($saveFileDialog.ShowDialog() -eq "OK") {
                $statusLabel.Text = "Converting from Base64..."
                $statusLabel.ForeColor = "Blue"
                $form.Refresh()
                
                # Extract Base64 data (remove data URL prefix if present)
                $base64Data = $base64TextBox.Text.Trim()
                if ($base64Data.StartsWith("data:")) {
                    $commaIndex = $base64Data.IndexOf(",")
                    if ($commaIndex -gt 0) {
                        $base64Data = $base64Data.Substring($commaIndex + 1)
                    }
                }
                
                # Convert Base64 to bytes and save
                $bytes = [System.Convert]::FromBase64String($base64Data)
                [System.IO.File]::WriteAllBytes($saveFileDialog.FileName, $bytes)
                
                $statusLabel.Text = "Image saved successfully: $($saveFileDialog.FileName)"
                $statusLabel.ForeColor = "Green"
            }
        }
        catch {
            $statusLabel.Text = "Error converting from Base64: $($_.Exception.Message)"
            $statusLabel.ForeColor = "Red"
        }
    }
    else {
        $statusLabel.Text = "No Base64 data to convert"
        $statusLabel.ForeColor = "Orange"
    }
})

# Add controls to form
$fileGroupBox.Controls.AddRange(@($filePathTextBox, $browseButton, $convertToBase64Button, $includeDataUrlCheckBox))
$base64GroupBox.Controls.AddRange(@($base64TextBox, $copyButton, $pasteButton, $clearButton, $convertFromBase64Button))
$form.Controls.AddRange(@($fileGroupBox, $base64GroupBox, $pictureBox, $statusLabel, $infoLabel))

# Show the form
$form.ShowDialog() | Out-Null
